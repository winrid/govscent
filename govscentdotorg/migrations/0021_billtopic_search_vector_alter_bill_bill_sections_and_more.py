# Generated by Django 4.1.7 on 2023-04-15 03:58

import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
from django.db import migrations, models
from django.contrib.postgres.search import SearchVector


def compute_search_vector(apps, schema_editor):
    # noinspection PyPep8Naming
    BillTopic = apps.get_model("govscentdotorg", "BillTopic")
    BillTopic.objects.update(search_vector=SearchVector("name"))


class Migration(migrations.Migration):

    dependencies = [
        ('govscentdotorg', '0020_billsection_last_analyze_model'),
    ]

    operations = [
        migrations.AddField(
            model_name='billtopic',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(null=True),
        ),
        migrations.AlterField(
            model_name='bill',
            name='bill_sections',
            field=models.ManyToManyField(blank=True, related_name='sections', to='govscentdotorg.billsection'),
        ),
        migrations.AlterField(
            model_name='bill',
            name='last_analyze_model',
            field=models.CharField(default='gpt-3.5-turbo', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='bill',
            name='last_analyzed_at',
            field=models.DateTimeField(blank=True, default=None, null=True),
        ),
        migrations.AlterField(
            model_name='bill',
            name='on_topic_ranking',
            field=models.PositiveSmallIntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='bill',
            name='smelliness',
            field=models.IntegerField(blank=True, default=None, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='bill',
            name='smells',
            field=models.ManyToManyField(blank=True, to='govscentdotorg.billsmell'),
        ),
        migrations.AlterField(
            model_name='bill',
            name='topics',
            field=models.ManyToManyField(blank=True, related_name='related_bills', to='govscentdotorg.billtopic'),
        ),
        migrations.AddIndex(
            model_name='billtopic',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='govscentdot_search__bcbbee_gin'),
        ),
        migrations.RunSQL(
            sql="""
            CREATE FUNCTION update_trigger() RETURNS trigger AS $$
            begin
            new.search_vector :=
                setweight(to_tsvector('pg_catalog.english', coalesce(new.name,'')), 'A');
            return new;
            end
            $$ LANGUAGE plpgsql;
            CREATE TRIGGER search_vector_trigger
            BEFORE INSERT OR UPDATE
            ON govscentdotorg_billtopic
            FOR EACH ROW EXECUTE PROCEDURE
            update_trigger();
            UPDATE govscentdotorg_billtopic SET search_vector = NULL;
            """,
            reverse_sql="""
            DROP TRIGGER IF EXISTS search_vector_trigger
            ON govscentdotorg_billtopic;
            """,
        ),
        migrations.RunPython(
            compute_search_vector, reverse_code=migrations.RunPython.noop
        )
    ]
